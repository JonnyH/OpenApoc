name: CMake Windows

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  VCPKG_DEFAULT_TRIPLET: x64-windows
  VCVARS_ARCH: amd64

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2022

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: lukka/get-cmake@latest
    - name: Install Qt
      uses: jurplel/install-qt-action@v4

    - name: Setup vcvars
      run: "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ env.VCVARS_ARCH }}


    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: d5ec528843d29e3a52d745a64b469f810b2cedbf #2025.02.14
        vcpkgDirectory: '${{ runner.workspace }}/vcpkg'

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Install choco packages
      run: choco install nsis curl ninja

    - name: Download minimal cd image
      run: curl http://s2.jonnyh.net/pub/cd_minimal.iso.xz -o ${{github.workspace}}\data\cd.iso.xz
    
    - name: Extract minimal cd image
      run: xz -d ${{github.workspace}}\data\cd.iso.xz

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake ${{github.workspace}} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -GNinja -DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DUSE_SYSTEM_QT=ON -DMSVC_PDB=ON

    - name: Build
      working-directory: ${{runner.workspace}}/build
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config ${{ env.BUILD_TYPE }}

    - name: Test
      working-directory: ${{runner.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{ env.BUILD_TYPE }}

    - name: Prepare debug
      working-directory: ${{runner.workspace}}
      run: |
        git describe --tags > build-id
        set /p OPENAPOC_VERSION= < build-id
        set OPENAPOC_DEBUG_FILENAME=OpenApoc-debug-%PLATFORM%-%OPENAPOC_VERSION%.7z
        copy build\bin\*.pdb OpenApoc-%OPENAPOC_VERSION%\
        7z a %OPENAPOC_DEBUG_FILENAME% OpenApoc-%OPENAPOC_VERSION% -mx=9 -myx=7
        del OpenApoc-%OPENAPOC_VERSION%\*.pdb
    - name: Upload debug files
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.OPENAPOC_DEBUG_FILENAME }}
        path: ${{ env.OPENAPOC_DEBUG_FILENAME }}

    - name: Prepare portable
      working-directory: ${{runner.workspace}}
      run: |
        set OPENAPOC_FILENAME=OpenApoc-%PLATFORM%-%OPENAPOC_VERSION%.7z
        mkdir OpenApoc-%OPENAPOC_VERSION%
        echo %APPVEYOR_REPO_COMMIT% > OpenApoc-%OPENAPOC_VERSION%\git-commit
        echo %OPENAPOC_VERSION% > OpenApoc-%OPENAPOC_VERSION%\build-id
        copy build\bin\*.dll OpenApoc-%OPENAPOC_VERSION%\
        copy build\bin\openapoc.exe OpenApoc-%OPENAPOC_VERSION%\
        copy build\bin\openapoc_launcher.exe OpenApoc-%OPENAPOC_VERSION%\
        start %QTPATH%\bin\windeployqt --no-angle --no-opengl-sw --no-compiler-runtime OpenApoc-%OPENAPOC_VERSION%\OpenApoc_Launcher.exe
        xcopy /E OpenApoc\data OpenApoc-%OPENAPOC_VERSION%\data\
        copy OpenApoc\*.md OpenApoc-%OPENAPOC_VERSION%\
        copy OpenApoc\*.txt OpenApoc-%OPENAPOC_VERSION%\
        
