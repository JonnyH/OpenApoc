name: windows

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install Qt
      uses: jurplel/install-qt-action@v3

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Download minimal cd image
      run: |
        ls
        ls data
        ls ${env:GITHUB_WORKSPACE}
        ls ${env:GITHUB_WORKSPACE}/data
        curl http://s2.jonnyh.net/pub/cd_minimal.iso.xz -o ${env:GITHUB_WORKSPACE}/data/cd.iso.xz
    
    - name: Extract minimal cd image
      run: 7z e ${env:GITHUB_WORKSPACE}\data\cd.iso.xz -odata\

    - name: Update vcpkg
      run: |
        cd ${env:VCPKG_INSTALLATION_ROOT}
        git pull
        .\bootstrap-vcpkg.bat
        vcpkg install

    - name: Install dependencies
      run: |
        choco install nsis -pre
        vcpkg install

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake -DMSVC_PDB=ON ${env:GITHUB_WORKSPACE} -GNinja -DCMAKE_TOOLCHAIN_FILE=c:/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE="${env:BUILD_TYPE}" -DUSE_SYSTEM_QT=ON

    - name: Build
      working-directory: ${{runner.workspace}}/build
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config %BUILD_TYPE%

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${env:BUILD_TYPE} -V
