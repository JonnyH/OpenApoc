name: windows

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  VCPKG_DEFAULT_TRIPLET: x64-windows

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: ilammy/msvc-dev-cmd@v1
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install Qt
      uses: jurplel/install-qt-action@v3

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Download minimal cd image
      run: |
        curl http://s2.jonnyh.net/pub/cd_minimal.iso.xz -o ${env:GITHUB_WORKSPACE}/data/cd.iso.xz
    
    - name: Extract minimal cd image
      run: 7z e ${env:GITHUB_WORKSPACE}\data\cd.iso.xz -o${env:GITHUB_WORKSPACE}\data\

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@main
      id: runvcpkg
      with:
        # This specifies the location of vcpkg, where it is going to be restored from cache, or create from scratch.
        vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
        # The Git commit id of vcpkg to be checked out.
        # Tag 2023.07.21, but this only seems to support the SHA directly
        vcpkgGitCommitId: '9d47b24eacbd1cd94f139457ef6cd35e5d92cc84'

    - name: Install dependencies
      run: |
        choco install nsis -pre

    - name: ENV
      run: env

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake -DMSVC_PDB=ON ${env:GITHUB_WORKSPACE} -GNinja -DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/b/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE="${env:BUILD_TYPE}" -DUSE_SYSTEM_QT=ON

    - name: Build
      working-directory: ${{runner.workspace}}/build
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config ${env:BUILD_TYPE}

    - name: Test
      working-directory: ${{runner.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${env:BUILD_TYPE} -V

    - name: Package debug files
      working-directory: ${{runner.workspace}}/build/bin
      run: |
        mkdir ..\packaged
        7z a ..\packaged\OpenApoc-debug.7z *.pdb
        del ${env:GITHUB_WORKSPACE}\cd.iso
        xcopy /E ${env:GITHUB_WORKSPACE}\data .\data\
        del *.pdb
        del *.lib
        del *.ilk
        del *.exp
        copy ${env:GITHUB_WORKSPACE}\README* .
        makensis ${env:GITHUB_WORKSPACE}\install\windows\installer.nsi

    - uses: actions/upload-artifact@v3
      with:
        name: openapoc-msvc-build
        path: |
          ${{runner.workspace}}/build/packaged/OpenApoc-debug.7z
          ${{runner.workspace}}/build/packaged/install-openapoc-.exe
